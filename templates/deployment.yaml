apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "windforlife.fullname" . }}
  labels:
    {{- include "windforlife.labels" . | nindent 4 }}
spec:
  {{- if not .Values.app.autoscaling.enabled }}
  replicas: {{ .Values.app.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "windforlife.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.app.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "windforlife.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.app.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "windforlife.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.app.podSecurityContext | nindent 8 }}
      # add a init container for waiting postgres service ready
      initContainers:
      - name: wait-postgres
        image: bitnami/postgresql:latest
        command: 
        - sh 
        - -c 
        - |
          until pg_isready -h {{ printf "%s-%s" .Release.Name "postgresql" }} -p 5432; do echo "Waiting for PostgreSQL..." && sleep 2; done
        env:
        # provoiding this env var will lead the pg_isready to use it for the connection
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-postgresql-app
              key: postgres-username
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.app.securityContext | nindent 12 }}
          image: "{{ .Values.app.image.repository }}:{{ .Values.app.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.app.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {{- toYaml .Values.app.resources | nindent 12 }}
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-redis-app
                  key: redis-password
            # add POSTGRESQL_USER as env from secret
            - name: POSTGRESQL_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-postgresql-app
                  key: postgres-username
            # add POSTGRESQL_PASSWORD as env from secret
            - name: POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-postgresql-app
                  key: postgres-password
            - name: POSTGRESQL_DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}-postgresql-app
                  key: postgresql-db-name
            # add POSTGRESQL_PORT
            - name: POSTGRESQL_PORT
              value: {{ if .Values.postgresql.poc }}"5432" {{ else }}{{ .Values.postgresql.managedPort }} {{ end }}
            # add POSTGRESQL_HOST
            - name: POSTGRESQL_HOST
              value: {{ if .Values.postgresql.poc }}{{ printf "%s-%s" .Release.Name "postgresql" }} {{ else }}{{ .Values.postgresql.managedEndpoint }} {{ end }} 
      {{- with .Values.app.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.app.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.app.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
